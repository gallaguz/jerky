generator client {
  provider = "prisma-client-js"
  output   = env("OUTPUT")
}

datasource db {
  provider = "postgresql"
  url      = env("CATALOG_DATABASE_URL")
}

/// Jerky | Sausages | ...
model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uuid        String  @unique
  title       String  @unique
  description String?

  recipe  Recipe[]
  product Product[]
  raw     Raw[]
}

/// Chicken | Beef | Hindi | Fish | ...
model Raw {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uuid        String  @unique
  title       String  @unique
  description String?

  price Float

  category Category[]
  recipe   Recipe[]
  product  Product[]
}

/// Salty | Spicy | Marinated | Special | BBQ | ...
model RecipeType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uuid        String  @unique
  title       String  @unique
  description String?

  recipe  Recipe[]
  product Product[]
}

///
model Recipe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uuid        String  @unique
  title       String
  description String?

  recipeTypeUuid String
  categoryUuid   String
  rawUuid        String
  recipeType     RecipeType      @relation(fields: [recipeTypeUuid], references: [uuid])
  category       Category        @relation(fields: [categoryUuid], references: [uuid])
  raw            Raw             @relation(fields: [rawUuid], references: [uuid])
  ingredientQty  IngredientQty[]
  products       Product[]
}

/// Jerky Chicken Marinated | Sausages Beef Salty | ...
model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uuid        String  @unique
  title       String
  description String?

  price       Int?

  recipeTypeUuid String
  categoryUuid   String
  rawUuid        String
  recipeUuid     String
  category       Category   @relation(fields: [categoryUuid], references: [uuid])
  raw            Raw        @relation(fields: [rawUuid], references: [uuid])
  recipeType     RecipeType @relation(fields: [recipeTypeUuid], references: [uuid])
  recipe         Recipe     @relation(fields: [recipeUuid], references: [uuid])
}

/// Salt | Red Paper | Black Paper | Paprika | Nitrit Salt | Coreander | ...
model Ingredient {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uuid        String          @unique
  title       String
  form        IngredientForm?
  description String?

  price Float

  ingredientQty IngredientQty[]
}

/// Ingredient Quantity per one kg
model IngredientQty {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uuid String @unique

  qtyPerKg Float

  recipe     Recipe[]
  ingredient Ingredient[]
}



enum IngredientForm {
  SAND
  FLAKES
  POWDER
  LIQUOR
  SPLIT
  VISCOUS
}
